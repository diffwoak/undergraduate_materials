#include"Stone.h"
#include<iostream>
#include<stdio.h>
#include<easyx.h>
#include<graphics.h>
TCHAR* Stone::getText(){
    switch(this->_type)//用于绘制棋子上的文字
    {
    case che:
        return _T("车");
    case ma:
        return _T("马");
    case pao:
        return _T("炮");
    case bing:
        return _T("兵");
    case jiang:
        return _T("将");
    case shi:
        return _T("士");
    case xiang:
        return _T("相");
    }
    return _T("错误");
}
void Stone::sb1(){
    int sb[10][9]={
            {0,	0,	0, 11, 15, 11,	0,	0,	0},	
		    {0,	0,	0,	2,	2,	2,	0,	0,	0},	
		    {0,	0,	0,	1,	1,	1,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb2(){
    int sb[10][9]={
            {0,	0,	0, 20,  0, 20,	0,	0,	0},	
		    {0,	0,	0,	0, 23,	0,	0,	0,	0},	
		    {0,	0,	0, 20,	0, 20,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb3(){
    int sb[10][9]={
            {0,	0, 20,  0,  0,  0, 20,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {18,0,	0,	0,	23,	0,	0,	0, 18},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0, 20,	0,	0,	0, 20,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},	
		    {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
            {0,	0,	0,	0,	0,	0,	0,	0,	0},
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb4(){
    int sb[10][9]={
            {194,206,204,212,200,212,204,206,194},
		    {200,208,206,212,200,212,206,208,200},
		    {198,208,204,212,212,212,204,208,198},
		    {204,209,204,212,214,212,204,209,204},
		    {208,212,212,214,215,214,212,212,208},
		    {208,211,211,214,215,214,211,211,208},
		    {206,213,213,216,216,216,213,213,206},
		    {206,208,207,214,216,214,207,208,206},
		    {206,212,209,216,233,216,209,212,206},
		    {206,208,207,213,214,213,207,208,206}
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb5(){
    int sb[10][9]={
            {88, 85, 90, 88, 90, 88, 90, 85, 88},
		    {85, 90, 92, 93, 78, 93, 92, 90, 85},
		    {93, 92, 94, 95, 92, 95, 94, 92, 93},
		    {92, 94, 98, 95, 98, 95, 98, 94, 92},
		    {90, 98,101,102,103,102,101, 98, 90},
		    {90,100, 99,103,104,103, 99,100, 90},
		    {93,108,100,107,100,107,100,108, 93},
		    {92, 98, 99,103, 99,103, 99, 98, 92},
		    {90, 96,103, 97, 94, 97,103, 96, 90},
		    {90, 90, 90, 96, 90, 96, 90, 90, 90}
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb6(){
    int sb[10][9]={
            {194,206,204,212,200,212,204,206,194},
		    {200,208,206,212,200,212,206,208,200},
		    {198,208,204,212,212,212,204,208,198},
		    {204,209,204,212,214,212,204,209,204},
		    {208,212,212,214,215,214,212,212,208},
		    {208,211,211,214,215,214,211,211,208},
		    {206,213,213,216,216,216,213,213,206},
		    {206,208,207,214,216,214,207,208,206},
		    {206,212,209,216,233,216,209,212,206},
		    {206,208,207,213,214,213,207,208,206}
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::sb7(){
    int sb[10][9]={
            { 0,	0,	0,	0,	0,	0,	0,	0,	0},
		    { 0,	0,	0,	0,	0,	0,	0,	0,	0},
		    { 0,	0,	0,	0,	0,	0,	0,	0,	0},
		    { 7,	0,	7,	0, 15,	0,	7,	0,	7},
		    { 7,	0, 13,	0, 16,	0, 13,	0,	7},
		    {14, 18, 20, 27, 29, 27, 20, 18, 14},
		    {19, 23, 27, 29, 30, 29, 27, 23, 19},
		    {19, 24, 32, 37, 37, 37, 32, 24, 19},
		    {19, 24, 34, 42, 44, 42, 34, 24, 19},
		    { 9,	9,	9, 11, 13, 11,	9,	9,	9},
        };
        for(int i=0;i<10;i++){
        for(int j=0;j<9;j++){
            if(_id<16){scoreboard[i][j]=sb[i][j];}
            else {scoreboard[i][j]=sb[9-i][8-j];}
        }
    }
}
void Stone::init(int id,bool first){
    struct{
        unsigned short row,col;
        Stone::TYPE type;
    }pos[16]={
        {0,0,Stone::che},
        {0,1,Stone::ma},
        {0,2,Stone::xiang},
        {0,3,Stone::shi},
        {0,4,Stone::jiang},
        {0,5,Stone::shi},
        {0,6,Stone::xiang},
        {0,7,Stone::ma},
        {0,8,Stone::che},
        {2,1,Stone::pao},
        {2,7,Stone::pao},
        {3,0,Stone::bing},{3,2,Stone::bing},{3,4,Stone::bing},
        {3,6,Stone::bing},{3,8,Stone::bing}
    };
    _id=id;_dead=false;_red=(first==false)?(id<16):(id>=16);
    if(id<16){_row=pos[id].row;_col=pos[id].col;_type=pos[id].type;}
    else{_row=9-pos[id-16].row;_col=8-pos[id-16].col;_type=pos[id-16].type;} 
    switch(_type)
    {
    case Stone::jiang:
        sb1();break;
    case Stone::shi:
        sb2();break;
    case Stone::xiang:
        sb3();break;
    case Stone::che:
        sb4();break;
    case Stone::ma:
        sb5();break;
    case Stone::pao:
        sb6();break;
    case Stone::bing:
        sb7();break;
    }
}