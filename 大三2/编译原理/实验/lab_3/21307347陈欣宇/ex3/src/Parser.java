
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import callgraph.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\005\006\000\002\006\004" +
    "\000\002\006\002\000\002\013\004\000\002\013\002\000" +
    "\002\014\006\000\002\015\004\000\002\015\002\000\002" +
    "\016\004\000\002\016\002\000\002\017\006\000\002\020" +
    "\004\000\002\020\002\000\002\021\004\000\002\021\002" +
    "\000\002\022\006\000\002\024\004\000\002\024\002\000" +
    "\002\023\004\000\002\025\005\000\002\026\006\000\002" +
    "\027\005\000\002\030\003\000\002\030\002\000\002\031" +
    "\004\000\002\031\005\000\002\032\004\000\002\032\002" +
    "\000\002\033\004\000\002\033\002\000\002\034\004\000" +
    "\002\035\006\000\002\036\003\000\002\036\002\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\006\000\002\041\004" +
    "\000\002\041\002\000\002\042\004\000\002\043\003\000" +
    "\002\043\002\000\002\044\005\000\002\045\006\000\002" +
    "\046\004\000\002\047\004\000\002\047\002\000\002\050" +
    "\004\000\002\004\004\000\002\051\004\000\002\051\002" +
    "\000\002\052\004\000\002\053\003\000\002\053\002\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\010\007\000\002\007\011\000\002\012\004" +
    "\000\002\012\002\000\002\011\006\000\002\055\003\000" +
    "\002\055\002\000\002\056\004\000\002\057\004\000\002" +
    "\060\003\000\002\060\002\000\002\061\004\000\002\061" +
    "\005\000\002\062\003\000\002\062\002\000\002\063\004" +
    "\000\002\064\004\000\002\064\002\000\002\065\004\000" +
    "\002\066\006\000\002\067\005\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\003\000\002\070\003\000\002\070\004" +
    "\000\002\070\004\000\002\071\003\000\002\071\004\000" +
    "\002\071\004\000\002\071\004\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\072\004\000\002\072" +
    "\004\000\002\072\004\000\002\072\004\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\004\000\002\072\003\000\002\073\004\000\002" +
    "\073\003\000\002\073\005\000\002\073\004\000\002\074" +
    "\004\000\002\074\002\000\002\075\004\000\002\075\005" +
    "\000\002\076\004\000\002\077\004\000\002\100\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\004\004\001\002\000\004\055\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\042\010\001\002\000\016\005\ufffb\006\ufffb\007" +
    "\011\010\ufffb\011\ufffb\012\ufffb\001\002\000\016\005\ufff9" +
    "\006\ufff9\010\ufff9\011\ufff9\012\ufff9\055\ufff9\001\002\000" +
    "\014\005\ufff6\006\ufff6\010\172\011\ufff6\012\ufff6\001\002" +
    "\000\006\005\014\006\ufffe\001\002\000\022\006\uffc5\016" +
    "\031\022\023\042\uffc5\055\037\061\021\062\035\063\030" +
    "\001\002\000\004\006\016\001\002\000\004\055\017\001" +
    "\002\000\004\043\020\001\002\000\004\002\001\001\002" +
    "\000\014\006\uffb3\020\uffb3\021\uffb3\042\uffb3\046\044\001" +
    "\002\000\012\006\uffc2\020\uffc2\021\uffc2\042\uffc2\001\002" +
    "\000\016\030\053\032\045\041\061\046\054\055\060\056" +
    "\047\001\002\000\012\006\uffbe\020\uffbe\021\uffbe\042\uffbe" +
    "\001\002\000\012\006\uffc4\020\uffc4\021\uffc4\042\uffc4\001" +
    "\002\000\004\006\uffff\001\002\000\012\006\uffbf\020\uffbf" +
    "\021\uffbf\042\uffbf\001\002\000\014\006\uffb3\020\uffb3\021" +
    "\uffb3\042\uffb3\046\044\001\002\000\016\030\053\032\045" +
    "\041\061\046\054\055\060\056\047\001\002\000\012\006" +
    "\uffc8\020\uffc8\021\uffc8\042\uffc8\001\002\000\012\006\uffc0" +
    "\020\uffc0\021\uffc0\042\uffc0\001\002\000\012\006\uffc6\020" +
    "\uffc6\021\uffc6\042\uffc6\001\002\000\014\006\uffb3\020\uffb3" +
    "\021\uffb3\042\uffb3\046\044\001\002\000\012\006\uffc1\020" +
    "\uffc1\021\uffc1\042\uffc1\001\002\000\022\006\uffb3\020\uffb3" +
    "\021\uffb3\042\uffb3\043\uff89\046\044\051\uff89\053\uff89\001" +
    "\002\000\012\006\uffc3\020\uffc3\021\uffc3\042\uffc3\001\002" +
    "\000\012\006\uffb4\020\uffb4\021\uffb4\042\uffb4\001\002\000" +
    "\010\043\066\051\136\053\065\001\002\000\012\006\uffb5" +
    "\020\uffb5\021\uffb5\042\uffb5\001\002\000\030\006\uffaf\020" +
    "\uffaf\021\uffaf\030\053\032\045\041\061\042\uffaf\046\054" +
    "\047\uffaf\055\060\056\047\001\002\000\012\041\061\046" +
    "\054\055\060\056\047\001\002\000\050\006\uffa2\014\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\103\032\104\034\105\042\uffa2\044\uffa2" +
    "\047\uffa2\050\uffa2\052\uffa2\054\uffa2\001\002\000\070\006" +
    "\uff8d\014\uff8d\017\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\032\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\052\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\001\002\000\060\006\uff9f\014\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\032\uff9f\034\uff9f\035\127\036\130\037\125\040\126" +
    "\042\uff9f\044\uff9f\047\uff9f\050\uff9f\052\uff9f\054\uff9f\001" +
    "\002\000\042\006\uffa3\014\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\023\uffa3\024\116\025\114\026\112\027\111\042\uffa3\044" +
    "\113\047\uffa3\050\uffa3\052\115\054\uffa3\001\002\000\014" +
    "\006\uffb0\020\uffb0\021\uffb0\042\uffb0\047\uffb0\001\002\000" +
    "\012\041\061\046\054\055\060\056\047\001\002\000\016" +
    "\030\053\032\045\041\061\046\054\055\060\056\047\001" +
    "\002\000\016\006\uffac\020\uffac\021\uffac\042\uffac\047\uffac" +
    "\050\uffac\001\002\000\070\006\uff8f\014\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\061\042\uff8f\044\uff8f\046\054\047\uff8f\050\uff8f" +
    "\052\uff8f\054\uff8f\055\060\056\047\001\002\000\014\006" +
    "\uffb2\020\uffb2\021\uffb2\042\uffb2\047\072\001\002\000\074" +
    "\006\uff89\014\uff89\017\uff89\020\uff89\021\uff89\023\uff89\024" +
    "\uff89\025\uff89\026\uff89\027\uff89\030\uff89\032\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043" +
    "\uff89\044\uff89\046\uff89\047\uff89\050\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\001\002\000\012\041\061\046" +
    "\054\055\060\056\047\001\002\000\070\006\uff8b\014\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b\001\002" +
    "\000\074\006\uff8e\014\uff8e\017\uff8e\020\uff8e\021\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\032\uff8e" +
    "\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\066\044\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e" +
    "\053\065\054\uff8e\055\uff8e\056\uff8e\001\002\000\076\006" +
    "\uff8a\014\uff8a\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\032\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000\016\030\053" +
    "\032\045\041\061\046\054\055\060\056\047\001\002\000" +
    "\004\055\067\001\002\000\076\006\uff88\014\uff88\017\uff88" +
    "\020\uff88\021\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\032\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\001\002\000\004\054\071\001\002\000\076\006" +
    "\uff87\014\uff87\017\uff87\020\uff87\021\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\032\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87" +
    "\044\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\056\uff87\001\002\000\012\006\uffb1" +
    "\020\uffb1\021\uffb1\042\uffb1\001\002\000\060\006\uff90\014" +
    "\uff90\017\uff90\020\uff90\021\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\032\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\042\uff90\044\uff90\047\uff90\050\uff90" +
    "\052\uff90\054\uff90\001\002\000\016\006\uffae\020\uffae\021" +
    "\uffae\042\uffae\047\uffae\050\075\001\002\000\016\030\053" +
    "\032\045\041\061\046\054\055\060\056\047\001\002\000" +
    "\016\006\uffad\020\uffad\021\uffad\042\uffad\047\uffad\050\uffad" +
    "\001\002\000\016\006\uffab\020\uffab\021\uffab\042\uffab\047" +
    "\uffab\050\uffab\001\002\000\004\047\101\001\002\000\070" +
    "\006\uff8c\014\uff8c\017\uff8c\020\uff8c\021\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\044" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\052\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\001\002\000\050\006\uffa1\014\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\103\032\104\034\105\042\uffa1\044\uffa1\047\uffa1\050" +
    "\uffa1\052\uffa1\054\uffa1\001\002\000\060\006\uff9e\014\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\032\uff9e\034\uff9e\041\061\042\uff9e" +
    "\044\uff9e\046\054\047\uff9e\050\uff9e\052\uff9e\054\uff9e\055" +
    "\060\056\047\001\002\000\060\006\uff9d\014\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\032\uff9d\034\uff9d\041\061\042\uff9d\044\uff9d" +
    "\046\054\047\uff9d\050\uff9d\052\uff9d\054\uff9d\055\060\056" +
    "\047\001\002\000\060\006\uff9c\014\uff9c\017\uff9c\020\uff9c" +
    "\021\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\032\uff9c\034\uff9c\041\061\042\uff9c\044\uff9c\046\054" +
    "\047\uff9c\050\uff9c\052\uff9c\054\uff9c\055\060\056\047\001" +
    "\002\000\050\006\uff99\014\uff99\017\uff99\020\uff99\021\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\032" +
    "\uff99\034\uff99\042\uff99\044\uff99\047\uff99\050\uff99\052\uff99" +
    "\054\uff99\001\002\000\050\006\uff9a\014\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\032\uff9a\034\uff9a\042\uff9a\044\uff9a\047\uff9a\050" +
    "\uff9a\052\uff9a\054\uff9a\001\002\000\050\006\uff9b\014\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\032\uff9b\034\uff9b\042\uff9b\044\uff9b" +
    "\047\uff9b\050\uff9b\052\uff9b\054\uff9b\001\002\000\016\030" +
    "\053\032\045\041\061\046\054\055\060\056\047\001\002" +
    "\000\016\030\053\032\045\041\061\046\054\055\060\056" +
    "\047\001\002\000\016\030\053\032\045\041\061\046\054" +
    "\055\060\056\047\001\002\000\016\030\053\032\045\041" +
    "\061\046\054\055\060\056\047\001\002\000\016\030\053" +
    "\032\045\041\061\046\054\055\060\056\047\001\002\000" +
    "\016\030\053\032\045\041\061\046\054\055\060\056\047" +
    "\001\002\000\026\006\uffa7\014\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\023\uffa7\042\uffa7\047\uffa7\050\uffa7\054\uffa7\001\002" +
    "\000\026\006\uffa8\014\uffa8\017\uffa8\020\uffa8\021\uffa8\023" +
    "\uffa8\042\uffa8\047\uffa8\050\uffa8\054\uffa8\001\002\000\026" +
    "\006\uffa6\014\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6\042" +
    "\uffa6\047\uffa6\050\uffa6\054\uffa6\001\002\000\026\006\uffa9" +
    "\014\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\042\uffa9\047" +
    "\uffa9\050\uffa9\054\uffa9\001\002\000\026\006\uffa5\014\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\023\uffa5\042\uffa5\047\uffa5\050" +
    "\uffa5\054\uffa5\001\002\000\026\006\uffa4\014\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\023\uffa4\042\uffa4\047\uffa4\050\uffa4\054" +
    "\uffa4\001\002\000\070\006\uff96\014\uff96\017\uff96\020\uff96" +
    "\021\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030" +
    "\uff96\032\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\061\042\uff96\044\uff96\046\054\047\uff96\050\uff96\052" +
    "\uff96\054\uff96\055\060\056\047\001\002\000\070\006\uff95" +
    "\014\uff95\017\uff95\020\uff95\021\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\030\uff95\032\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\061\042\uff95\044\uff95\046" +
    "\054\047\uff95\050\uff95\052\uff95\054\uff95\055\060\056\047" +
    "\001\002\000\070\006\uff98\014\uff98\017\uff98\020\uff98\021" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\032\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\061\042\uff98\044\uff98\046\054\047\uff98\050\uff98\052\uff98" +
    "\054\uff98\055\060\056\047\001\002\000\070\006\uff97\014" +
    "\uff97\017\uff97\020\uff97\021\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\032\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\061\042\uff97\044\uff97\046\054" +
    "\047\uff97\050\uff97\052\uff97\054\uff97\055\060\056\047\001" +
    "\002\000\060\006\uff93\014\uff93\017\uff93\020\uff93\021\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\032" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042\uff93" +
    "\044\uff93\047\uff93\050\uff93\052\uff93\054\uff93\001\002\000" +
    "\060\006\uff94\014\uff94\017\uff94\020\uff94\021\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\044\uff94" +
    "\047\uff94\050\uff94\052\uff94\054\uff94\001\002\000\060\006" +
    "\uff91\014\uff91\017\uff91\020\uff91\021\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\032\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\042\uff91\044\uff91\047\uff91" +
    "\050\uff91\052\uff91\054\uff91\001\002\000\060\006\uff92\014" +
    "\uff92\017\uff92\020\uff92\021\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\032\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\042\uff92\044\uff92\047\uff92\050\uff92" +
    "\052\uff92\054\uff92\001\002\000\050\006\uffa0\014\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\103\032\104\034\105\042\uffa0\044\uffa0\047" +
    "\uffa0\050\uffa0\052\uffa0\054\uffa0\001\002\000\016\030\053" +
    "\032\045\041\061\046\054\055\060\056\047\001\002\000" +
    "\012\006\uffaa\020\uffaa\021\uffaa\042\uffaa\001\002\000\012" +
    "\006\uff85\020\uff85\021\uff85\042\uff85\001\002\000\012\006" +
    "\uffca\020\uffca\021\uffca\042\143\001\002\000\012\006\uffc9" +
    "\020\uffc9\021\uffc9\042\uffc9\001\002\000\026\006\uffc5\016" +
    "\031\020\uffc5\021\uffc5\022\023\042\uffc5\055\037\061\021" +
    "\062\035\063\030\001\002\000\012\006\uffc7\020\uffc7\021" +
    "\uffc7\042\uffc7\001\002\000\004\017\146\001\002\000\026" +
    "\006\uffc5\016\031\020\uffc5\021\uffc5\022\023\042\uffc5\055" +
    "\037\061\021\062\035\063\030\001\002\000\010\006\uffba" +
    "\020\uffba\021\uffba\001\002\000\010\006\uffb7\020\153\021" +
    "\152\001\002\000\004\006\uffb8\001\002\000\022\006\uffc5" +
    "\016\031\022\023\042\uffc5\055\037\061\021\062\035\063" +
    "\030\001\002\000\016\030\053\032\045\041\061\046\054" +
    "\055\060\056\047\001\002\000\010\006\uffbb\020\uffbb\021" +
    "\uffbb\001\002\000\004\006\156\001\002\000\012\006\uffbc" +
    "\020\uffbc\021\uffbc\042\uffbc\001\002\000\004\017\160\001" +
    "\002\000\026\006\uffc5\016\031\020\uffc5\021\uffc5\022\023" +
    "\042\uffc5\055\037\061\021\062\035\063\030\001\002\000" +
    "\010\006\uffb9\020\uffb9\021\uffb9\001\002\000\004\006\uffb6" +
    "\001\002\000\012\006\uff84\020\uff84\021\uff84\042\uff84\001" +
    "\002\000\004\023\165\001\002\000\022\006\uffc5\016\031" +
    "\022\023\042\uffc5\055\037\061\021\062\035\063\030\001" +
    "\002\000\004\006\167\001\002\000\012\006\uffbd\020\uffbd" +
    "\021\uffbd\042\uffbd\001\002\000\012\006\uff86\020\uff86\021" +
    "\uff86\042\uff86\001\002\000\012\005\ufff1\006\ufff1\011\232" +
    "\012\ufff1\001\002\000\014\005\ufff4\006\ufff4\011\ufff4\012" +
    "\ufff4\055\ufff4\001\002\000\014\005\ufff7\006\ufff7\011\ufff7" +
    "\012\ufff7\055\174\001\002\000\004\044\176\001\002\000" +
    "\014\005\ufff5\006\ufff5\011\ufff5\012\ufff5\055\ufff5\001\002" +
    "\000\014\013\204\015\177\055\201\057\206\060\202\001" +
    "\002\000\010\006\uffd1\042\uffd1\055\215\001\002\000\004" +
    "\042\212\001\002\000\010\006\uffdb\042\uffdb\047\uffdb\001" +
    "\002\000\010\006\uffd7\042\uffd7\047\uffd7\001\002\000\010" +
    "\006\uffda\042\uffda\047\uffda\001\002\000\016\030\053\032" +
    "\045\041\061\046\054\055\060\056\047\001\002\000\010" +
    "\006\uffd9\042\uffd9\047\uffd9\001\002\000\010\006\uffd8\042" +
    "\uffd8\047\uffd8\001\002\000\004\014\210\001\002\000\014" +
    "\013\204\015\177\055\201\057\206\060\202\001\002\000" +
    "\010\006\uffcf\042\uffcf\047\uffcf\001\002\000\014\005\ufff3" +
    "\006\ufff3\011\ufff3\012\ufff3\055\ufff3\001\002\000\006\006" +
    "\uffd4\042\uffd4\001\002\000\006\006\uffd2\042\uffd2\001\002" +
    "\000\006\045\uffcc\050\uffcc\001\002\000\004\045\217\001" +
    "\002\000\014\013\204\015\177\055\201\057\206\060\202" +
    "\001\002\000\006\006\uffd0\042\uffd0\001\002\000\006\045" +
    "\uffce\050\222\001\002\000\004\055\224\001\002\000\006" +
    "\045\uffcd\050\uffcd\001\002\000\006\045\uffcb\050\uffcb\001" +
    "\002\000\006\006\230\042\227\001\002\000\006\006\uffd5" +
    "\042\uffd5\001\002\000\010\006\uffd1\042\uffd1\055\215\001" +
    "\002\000\010\006\uffd6\042\uffd6\047\uffd6\001\002\000\006" +
    "\006\uffd3\042\uffd3\001\002\000\012\005\uffef\006\uffef\012" +
    "\uffef\055\uffef\001\002\000\010\005\uffec\006\uffec\012\uffec" +
    "\001\002\000\010\005\ufffd\006\ufffd\012\236\001\002\000" +
    "\004\042\271\001\002\000\004\055\247\001\002\000\004" +
    "\042\241\001\002\000\010\005\uffed\006\uffed\012\uffed\001" +
    "\002\000\016\005\ufffb\006\ufffb\007\011\010\ufffb\011\ufffb" +
    "\012\ufffb\001\002\000\004\042\uffea\001\002\000\006\005" +
    "\014\006\ufffe\001\002\000\004\006\245\001\002\000\004" +
    "\055\246\001\002\000\004\042\uffe9\001\002\000\014\011" +
    "\250\042\uffe6\046\255\047\uffe2\055\uffdc\001\002\000\004" +
    "\055\uffdd\001\002\000\004\055\215\001\002\000\006\042" +
    "\uffe0\047\uffe0\001\002\000\004\047\261\001\002\000\004" +
    "\042\uffe8\001\002\000\010\011\250\047\uffe2\055\uffdc\001" +
    "\002\000\004\042\uffe7\001\002\000\004\047\260\001\002" +
    "\000\004\042\uffe4\001\002\000\004\042\uffe5\001\002\000" +
    "\006\042\264\047\uffe3\001\002\000\006\042\uffe1\047\uffe1" +
    "\001\002\000\006\011\250\055\uffdc\001\002\000\006\042" +
    "\uffdf\047\uffdf\001\002\000\004\045\267\001\002\000\014" +
    "\013\204\015\177\055\201\057\206\060\202\001\002\000" +
    "\006\042\uffde\047\uffde\001\002\000\010\005\uffeb\006\uffeb" +
    "\012\uffeb\001\002\000\012\005\ufff2\006\ufff2\012\ufff2\055" +
    "\215\001\002\000\012\005\ufff0\006\ufff0\012\ufff0\055\ufff0" +
    "\001\002\000\004\045\275\001\002\000\014\013\204\015" +
    "\177\055\201\057\206\060\202\001\002\000\004\042\277" +
    "\001\002\000\012\005\uffee\006\uffee\012\uffee\055\uffee\001" +
    "\002\000\016\005\ufffc\006\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\055\302\001\002\000\016\005\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\055\ufffa\001\002\000\004\044\303\001\002" +
    "\000\016\030\053\032\045\041\061\046\054\055\060\056" +
    "\047\001\002\000\004\042\305\001\002\000\016\005\ufff8" +
    "\006\ufff8\010\ufff8\011\ufff8\012\ufff8\055\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\012\006\011\001\001\000\004\013\277\001\001\000" +
    "\004\015\170\001\001\000\004\003\014\001\001\000\026" +
    "\004\025\007\021\010\035\053\031\054\033\057\037\066" +
    "\024\076\032\077\026\100\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\060\167\061\040\001\001\000\002\001\001\000\014" +
    "\067\163\070\050\071\045\072\047\073\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\060\162\061\040\001\001\000\014\067" +
    "\144\070\050\071\045\072\047\073\055\001\001\000\004" +
    "\051\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\060\137\061\040\001\001\000\002\001\001\000\010" +
    "\060\042\061\040\074\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\063\001\001\000\002\001\001" +
    "\000\020\062\056\063\051\067\054\070\050\071\045\072" +
    "\047\073\055\001\001\000\010\071\134\072\047\073\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\071\101" +
    "\072\047\073\055\001\001\000\014\067\077\070\050\071" +
    "\045\072\047\073\055\001\001\000\004\064\073\001\001" +
    "\000\004\073\072\001\001\000\002\001\001\000\004\074" +
    "\062\001\001\000\004\073\061\001\001\000\002\001\001" +
    "\000\004\075\063\001\001\000\002\001\001\000\014\067" +
    "\067\070\050\071\045\072\047\073\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\075" +
    "\001\001\000\014\067\076\070\050\071\045\072\047\073" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\071" +
    "\107\072\047\073\055\001\001\000\010\071\106\072\047" +
    "\073\055\001\001\000\010\071\105\072\047\073\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\070\123\071\045\072\047\073\055\001\001\000" +
    "\012\070\122\071\045\072\047\073\055\001\001\000\012" +
    "\070\121\071\045\072\047\073\055\001\001\000\012\070" +
    "\120\071\045\072\047\073\055\001\001\000\012\070\117" +
    "\071\045\072\047\073\055\001\001\000\012\070\116\071" +
    "\045\072\047\073\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\133\073\055\001\001" +
    "\000\006\072\132\073\055\001\001\000\006\072\131\073" +
    "\055\001\001\000\006\072\130\073\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\067\136\070\050\071\045" +
    "\072\047\073\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\141\001\001\000\002\001\001\000\024" +
    "\007\021\010\035\053\143\054\033\057\037\066\024\076" +
    "\032\077\026\100\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\146\007\021\010\035\053\031\054" +
    "\033\057\037\066\024\076\032\077\026\100\023\001\001" +
    "\000\004\012\147\001\001\000\010\011\153\055\154\056" +
    "\150\001\001\000\002\001\001\000\026\004\161\007\021" +
    "\010\035\053\031\054\033\057\037\066\024\076\032\077" +
    "\026\100\023\001\001\000\014\067\156\070\050\071\045" +
    "\072\047\073\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\160" +
    "\007\021\010\035\053\031\054\033\057\037\066\024\076" +
    "\032\077\026\100\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\165\007\021\010\035\053\031\054\033\057\037\066\024" +
    "\076\032\077\026\100\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\232\001\001" +
    "\000\004\016\172\001\001\000\004\017\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\177\040\204" +
    "\045\202\001\001\000\010\043\212\044\213\046\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\067\206\070\050\071\045\072" +
    "\047\073\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\210\040\204\045\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\224" +
    "\001\001\000\002\001\001\000\004\047\220\001\001\000" +
    "\002\001\001\000\010\037\217\040\204\045\202\001\001" +
    "\000\002\001\001\000\004\050\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\225" +
    "\001\001\000\002\001\001\000\010\043\230\044\213\046" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\271\001\001\000\004\024\233\001\001\000\010\023" +
    "\237\025\234\027\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\242\006\011\026\241\001\001\000\002\001\001\000\004" +
    "\003\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\253\031\255\032\252\035\251" +
    "\036\250\001\001\000\002\001\001\000\004\046\265\001" +
    "\001\000\004\033\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\256\035\251\036\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\262\001\001\000\002\001\001\000" +
    "\006\035\264\036\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\267\040\204\045\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\272\046\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\275\040\204\045\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\067\303\070\050\071\045\072\047" +
    "\073\055\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    /** 自定义扫描器*/
    protected scanner s;
    /** 绘制调用图类*/
    protected CallGraph graph;
    /** 存储调用过程语句*/
    private ArrayList<String> callList;
    /** 存储调用的过程名*/
    private ArrayList<String> proList;
    /** 调用过程语句的数量*/
    protected int CallCount = 0;
    /** 当前已处理调用过程语句的数量*/
    protected int currentStart = 0;
    /** 构造函数*/
    Parser(scanner s,CallGraph graph){
        this.s = s;
        this.graph = graph;
        this.callList = new ArrayList<>();
        this.proList = new ArrayList<>();
    }
    /** 返回当前扫描token的行*/
    public int getLine() {
      return s.getLine();
    }
    /** 返回当前扫描token的列*/
    public int getColumn() {
      return s.getColumn();
    }
    /** 添加调用过程语句*/
    public void addCall(String pro,String call){
        this.proList.add(pro);
        this.callList.add(call);
//        System.out.print(pro + " " + call + " " + CallCount + "\n");
        this.CallCount = CallCount + 1;
    }
    /** 处理调用过程语句*/
    public void dealCall(String procedure) throws Exception{
        for(int i = currentStart; i < CallCount;i++){
            graph.addCallSite("c"+ i, procedure, callList.get(i));
//            System.out.print("edge: c"+ i + " to "+  proList.get(i) + "\n");
            graph.addEdge("c"+ i, proList.get(i));
        }
        currentStart = CallCount;
//        System.out.print(procedure + " compile done\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // modulesBlock ::= MODULE IDENTIFIER SEMI declarations beginStatementSequenceBlock END IDENTIFIER DOT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		dealCall(e);graph.show(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modulesBlock",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= modulesBlock EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // beginStatementSequenceBlock ::= BEGIN statementSequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginStatementSequenceBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // beginStatementSequenceBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginStatementSequenceBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= constBlock typeBlock varBlocks procedureDeclarationBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constBlock ::= CONST identifierExpressionBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constBlock",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constBlock",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifierExpressionBlock ::= identifierExpressionBlock identifierExpression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierExpressionBlock",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifierExpressionBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierExpressionBlock",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifierExpression ::= IDENTIFIER EQUAL expression SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierExpression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typeBlock ::= TYPE identifierTypeBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeBlock",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // typeBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeBlock",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifierTypeBlock ::= identifierTypeBlock identifierType 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierTypeBlock",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifierTypeBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierTypeBlock",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifierType ::= IDENTIFIER EQUAL types SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varBlocks ::= VAR identifierListTypeBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBlocks",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varBlocks ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBlocks",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifierListTypeBlock ::= identifierListTypeBlock identifierListType 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierListTypeBlock",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifierListTypeBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierListTypeBlock",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifierListType ::= identifierList COLON types SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierListType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedureDeclarationBlock ::= procedureDeclarationBlock procedureDeclarations 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDeclarationBlock",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedureDeclarationBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDeclarationBlock",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedureDeclarations ::= procedureDeclaration SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDeclarations",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedureDeclaration ::= procedureHeading SEMI procedureBody 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 graph.addProcedure(e, e);dealCall(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDeclaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedureBody ::= declarations beginStatementSequenceBlock END IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureBody",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedureHeading ::= PROCEDURE IDENTIFIER formalParametersBlock 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureHeading",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formalParametersBlock ::= formalParameters 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParametersBlock",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formalParametersBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParametersBlock",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formalParameters ::= fpSectionBlock RIGHTPAR 
            {
              String RESULT =null;
		 if(true) throw new MissingLeftParenthesisException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formalParameters ::= LEFTPAR fpSectionBlock RIGHTPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fpSectionBlock ::= fpSection semiFpSectionsBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpSectionBlock",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fpSectionBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpSectionBlock",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // semiFpSectionsBlock ::= semiFpSectionsBlock semiFpSection 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFpSectionsBlock",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // semiFpSectionsBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFpSectionsBlock",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // semiFpSection ::= SEMI fpSection 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFpSection",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fpSection ::= varBlock identifierList COLON types 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpSection",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varBlock ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBlock",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBlock",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // types ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // types ::= arrayType 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // types ::= recordType 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // types ::= INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // types ::= BOOL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // recordType ::= RECORD fieldListBlock semiFieldListBlock END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recordType",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // semiFieldListBlock ::= semiFieldListBlock semiFieldList 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFieldListBlock",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // semiFieldListBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFieldListBlock",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // semiFieldList ::= SEMI fieldListBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiFieldList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fieldListBlock ::= fieldList 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldListBlock",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fieldListBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldListBlock",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fieldList ::= identifierList COLON types 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arrayType ::= ARRAY expression OF types 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayType",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // identifierList ::= IDENTIFIER commaIdentifierBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // commaIdentifierBlock ::= commaIdentifierBlock commaIdentifier 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaIdentifierBlock",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // commaIdentifierBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaIdentifierBlock",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // commaIdentifier ::= COMMA IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaIdentifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statementSequence ::= statementBlock semiStatementBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSequence",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // semiStatementBlock ::= semiStatementBlock semiStatement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiStatementBlock",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // semiStatementBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiStatementBlock",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // semiStatement ::= SEMI statementBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semiStatement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statementBlock ::= statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementBlock",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statementBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementBlock",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= assignment 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= procedureCall 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= ifStatement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= whileStatement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= readBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= writeBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= writelnBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // whileStatement ::= WHILE expression DO statementSequence END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ifStatement ::= IF expression THEN statementSequence elsifBlock elseBlock END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elsifBlock ::= elsifBlock elsifStatement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifBlock",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elsifBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifBlock",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elsifStatement ::= ELSIF expression THEN statementSequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifStatement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elseBlock ::= elseStatement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseBlock",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elseBlock ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseBlock",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elseStatement ::= ELSE statementSequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedureCall ::= IDENTIFIER actualParametersBlock 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addCall(e1,e1+e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureCall",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actualParametersBlock ::= actualParameters 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParametersBlock",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // actualParametersBlock ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParametersBlock",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // actualParameters ::= LEFTPAR expressionBlock 
            {
              String RESULT =null;
		 if (true) throw new MissingRightParenthesisException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParameters",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // actualParameters ::= LEFTPAR expressionBlock RIGHTPAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualParameters",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressionBlock ::= expressions 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionBlock",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expressionBlock ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionBlock",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressions ::= expression commaExpressionBlocks 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // commaExpressionBlocks ::= commaExpressionBlocks commaExpressionBlock 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaExpressionBlocks",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // commaExpressionBlocks ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaExpressionBlocks",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // commaExpressionBlock ::= COMMA expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "," + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaExpressionBlock",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignment ::= IDENTIFIER selectorBlock COLONEQ expression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= usimpleExpression EQUAL usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "=" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= usimpleExpression NOTEQUAL usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "#" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= usimpleExpression LESS usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "<" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= usimpleExpression LEQ usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "<=" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= usimpleExpression GREAT usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + ">" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= usimpleExpression GEQ usimpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + ">=" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= usimpleExpression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // usimpleExpression ::= simpleExpression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usimpleExpression",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // usimpleExpression ::= ADD simpleExpression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "+" + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usimpleExpression",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // usimpleExpression ::= MINUS simpleExpression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usimpleExpression",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // simpleExpression ::= term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simpleExpression ::= simpleExpression ADD 
            {
              String RESULT =null;
		if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simpleExpression ::= simpleExpression MINUS 
            {
              String RESULT =null;
		if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // simpleExpression ::= simpleExpression OR 
            {
              String RESULT =null;
		if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // simpleExpression ::= simpleExpression ADD simpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "+" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simpleExpression ::= simpleExpression MINUS simpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "-" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // simpleExpression ::= simpleExpression OR simpleExpression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + "OR" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= term MUL 
            {
              String RESULT =null;
		 if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= term DIV 
            {
              String RESULT =null;
		 if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= term MOD 
            {
              String RESULT =null;
		 if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= term AND 
            {
              String RESULT =null;
		 if (true) throw new MissingOperandException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= term MUL term 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1 + "MUL" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= term DIV term 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1 + "DIV" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term ::= term MOD term 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1 + "MOD" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= term AND term 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1 + "&" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // term ::= factor factor 
            {
              String RESULT =null;
		 if (true) throw  new MissingOperatorException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // term ::= factor 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= IDENTIFIER selectorBlock 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= NUMBER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= LEFTPAR expression RIGHTPAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= NOT factor 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "~" + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // selectorBlock ::= selectorBlock selector 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectorBlock",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // selectorBlock ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectorBlock",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "." + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // selector ::= LEFTMIDPAR expression RIGHTMIDPAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + e + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // readBlock ::= READ actualParametersBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readBlock",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // writeBlock ::= WRITE actualParametersBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeBlock",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // writelnBlock ::= WRITELN actualParametersBlock 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writelnBlock",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
